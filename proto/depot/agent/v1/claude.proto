syntax = "proto3";

package depot.agent.v1;

import "google/protobuf/timestamp.proto";

service ClaudeService {
  rpc UploadClaudeSession(UploadClaudeSessionRequest) returns (UploadClaudeSessionResponse);
  rpc DownloadClaudeSession(DownloadClaudeSessionRequest) returns (DownloadClaudeSessionResponse);
  rpc ListClaudeSessions(ListClaudeSessionsRequest) returns (ListClaudeSessionsResponse);
  rpc StartRemoteSession(StartRemoteSessionRequest) returns (StartRemoteSessionResponse);
  rpc GetRemoteSession(GetRemoteSessionRequest) returns (GetRemoteSessionResponse);
  rpc ListRemoteSessions(ListRemoteSessionsRequest) returns (ListRemoteSessionsResponse);
  rpc KillRemoteSession(KillRemoteSessionRequest) returns (KillRemoteSessionResponse);
  rpc AddSecret(AddSecretRequest) returns (AddSecretResponse);
  rpc RemoveSecret(RemoveSecretRequest) returns (RemoveSecretResponse);
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);
}

message UploadClaudeSessionRequest {
  string session_id = 1;
  bytes session_data = 2;
  optional string organization_id = 3;
  optional string summary = 4;
  string claude_session_id = 5;
}

message UploadClaudeSessionResponse {
  string session_url = 1;
}

message DownloadClaudeSessionRequest {
  string session_id = 1;
  optional string organization_id = 2;
}

message DownloadClaudeSessionResponse {
  bytes session_data = 1;
  optional string summary = 2;
  string claude_session_id = 3;
}

message ListClaudeSessionsRequest {
  optional string organization_id = 1;
  optional int32 page_size = 2;
  optional string page_token = 3;
}

message ListClaudeSessionsResponse {
  repeated ClaudeSession sessions = 1;
  optional string next_page_token = 2;
}

message ClaudeSession {
  string session_id = 1;
  google.protobuf.Timestamp updated_at = 2;
  google.protobuf.Timestamp created_at = 3;
  optional string summary = 4;
}

message StartRemoteSessionRequest {
  optional string organization_id = 1;
  optional string session_id = 2;
  optional string resume_session_id = 3;
  string argv = 4;
  map<string, string> environment_variables = 5;

  message Context {
    oneof context {
      GitContext git = 1;
    }
    message GitContext {
      optional string secret_name = 1; // Name of the secret containing the Git credentials (optional for public repos)
      string repository_url = 2; // URL of the Git repository
      optional string branch = 3; // Branch to use in the session
      optional string commit_hash = 4; // Commit hash to use in the session
    }
  }

  Context context = 7; // Context for the remote session
}

message StartRemoteSessionResponse {
  string session_id = 1;
}

message GetRemoteSessionRequest {
  string session_id = 1;
  string organization_id = 2;
}

message GetRemoteSessionResponse {
  optional google.protobuf.Timestamp started_at = 1;
  optional google.protobuf.Timestamp completed_at = 2;
  optional int32 exit_code = 3;
  optional double duration_seconds = 4;
  optional string error_message = 5;
}

message AddSecretRequest {
  optional string organization_id = 1;
  string secret_name = 2;
  optional string secret_description = 3;
  string secret_value = 4;
}

message AddSecretResponse {}

message RemoveSecretRequest {
  optional string organization_id = 1;
  string secret_name = 2;
}

message RemoveSecretResponse {}

message ListSecretsRequest {
  optional string organization_id = 1;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
}

message Secret {
  string name = 1;
  optional string description = 2;
  optional google.protobuf.Timestamp last_modified = 3;
}

message ListRemoteSessionsRequest {
  optional string organization_id = 1;
  optional int32 page_size = 2;
  optional string page_token = 3;
}

message ListRemoteSessionsResponse {
  repeated RemoteSession sessions = 1;
  optional string next_page_token = 2;
}

message RemoteSession {
  string session_id = 1;
  string organization_id = 2;
  google.protobuf.Timestamp created_at = 3;
  optional int32 exit_code = 4;
  optional double duration_seconds = 5;
  optional string error_message = 6;
}

message KillRemoteSessionRequest {
  string session_id = 1;
  optional string organization_id = 2;
}

message KillRemoteSessionResponse {}
