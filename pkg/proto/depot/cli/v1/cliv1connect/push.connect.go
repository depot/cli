// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/cli/v1/push.proto

package cliv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/depot/cli/pkg/proto/depot/cli/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PushServiceName is the fully-qualified name of the PushService service.
	PushServiceName = "depot.cli.v1.PushService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PushServiceStartPushProcedure is the fully-qualified name of the PushService's StartPush RPC.
	PushServiceStartPushProcedure = "/depot.cli.v1.PushService/StartPush"
	// PushServiceFinishPushProcedure is the fully-qualified name of the PushService's FinishPush RPC.
	PushServiceFinishPushProcedure = "/depot.cli.v1.PushService/FinishPush"
)

// PushServiceClient is a client for the depot.cli.v1.PushService service.
type PushServiceClient interface {
	StartPush(context.Context, *connect_go.Request[v1.StartPushRequest]) (*connect_go.Response[v1.StartPushResponse], error)
	FinishPush(context.Context, *connect_go.Request[v1.FinishPushRequest]) (*connect_go.Response[v1.FinishPushResponse], error)
}

// NewPushServiceClient constructs a client for the depot.cli.v1.PushService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPushServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PushServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pushServiceClient{
		startPush: connect_go.NewClient[v1.StartPushRequest, v1.StartPushResponse](
			httpClient,
			baseURL+PushServiceStartPushProcedure,
			opts...,
		),
		finishPush: connect_go.NewClient[v1.FinishPushRequest, v1.FinishPushResponse](
			httpClient,
			baseURL+PushServiceFinishPushProcedure,
			opts...,
		),
	}
}

// pushServiceClient implements PushServiceClient.
type pushServiceClient struct {
	startPush  *connect_go.Client[v1.StartPushRequest, v1.StartPushResponse]
	finishPush *connect_go.Client[v1.FinishPushRequest, v1.FinishPushResponse]
}

// StartPush calls depot.cli.v1.PushService.StartPush.
func (c *pushServiceClient) StartPush(ctx context.Context, req *connect_go.Request[v1.StartPushRequest]) (*connect_go.Response[v1.StartPushResponse], error) {
	return c.startPush.CallUnary(ctx, req)
}

// FinishPush calls depot.cli.v1.PushService.FinishPush.
func (c *pushServiceClient) FinishPush(ctx context.Context, req *connect_go.Request[v1.FinishPushRequest]) (*connect_go.Response[v1.FinishPushResponse], error) {
	return c.finishPush.CallUnary(ctx, req)
}

// PushServiceHandler is an implementation of the depot.cli.v1.PushService service.
type PushServiceHandler interface {
	StartPush(context.Context, *connect_go.Request[v1.StartPushRequest]) (*connect_go.Response[v1.StartPushResponse], error)
	FinishPush(context.Context, *connect_go.Request[v1.FinishPushRequest]) (*connect_go.Response[v1.FinishPushResponse], error)
}

// NewPushServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPushServiceHandler(svc PushServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PushServiceStartPushProcedure, connect_go.NewUnaryHandler(
		PushServiceStartPushProcedure,
		svc.StartPush,
		opts...,
	))
	mux.Handle(PushServiceFinishPushProcedure, connect_go.NewUnaryHandler(
		PushServiceFinishPushProcedure,
		svc.FinishPush,
		opts...,
	))
	return "/depot.cli.v1.PushService/", mux
}

// UnimplementedPushServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPushServiceHandler struct{}

func (UnimplementedPushServiceHandler) StartPush(context.Context, *connect_go.Request[v1.StartPushRequest]) (*connect_go.Response[v1.StartPushResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.PushService.StartPush is not implemented"))
}

func (UnimplementedPushServiceHandler) FinishPush(context.Context, *connect_go.Request[v1.FinishPushRequest]) (*connect_go.Response[v1.FinishPushResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.PushService.FinishPush is not implemented"))
}
