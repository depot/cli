// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/cli/v1/build.proto

package cliv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/depot/cli/pkg/proto/depot/cli/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BuildServiceName is the fully-qualified name of the BuildService service.
	BuildServiceName = "depot.cli.v1.BuildService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuildServiceCreateBuildProcedure is the fully-qualified name of the BuildService's CreateBuild
	// RPC.
	BuildServiceCreateBuildProcedure = "/depot.cli.v1.BuildService/CreateBuild"
	// BuildServiceFinishBuildProcedure is the fully-qualified name of the BuildService's FinishBuild
	// RPC.
	BuildServiceFinishBuildProcedure = "/depot.cli.v1.BuildService/FinishBuild"
	// BuildServiceGetBuildKitConnectionProcedure is the fully-qualified name of the BuildService's
	// GetBuildKitConnection RPC.
	BuildServiceGetBuildKitConnectionProcedure = "/depot.cli.v1.BuildService/GetBuildKitConnection"
	// BuildServiceReportBuildHealthProcedure is the fully-qualified name of the BuildService's
	// ReportBuildHealth RPC.
	BuildServiceReportBuildHealthProcedure = "/depot.cli.v1.BuildService/ReportBuildHealth"
	// BuildServiceReportTimingsProcedure is the fully-qualified name of the BuildService's
	// ReportTimings RPC.
	BuildServiceReportTimingsProcedure = "/depot.cli.v1.BuildService/ReportTimings"
	// BuildServiceReportStatusProcedure is the fully-qualified name of the BuildService's ReportStatus
	// RPC.
	BuildServiceReportStatusProcedure = "/depot.cli.v1.BuildService/ReportStatus"
	// BuildServiceReportBuildContextProcedure is the fully-qualified name of the BuildService's
	// ReportBuildContext RPC.
	BuildServiceReportBuildContextProcedure = "/depot.cli.v1.BuildService/ReportBuildContext"
	// BuildServiceListBuildsProcedure is the fully-qualified name of the BuildService's ListBuilds RPC.
	BuildServiceListBuildsProcedure = "/depot.cli.v1.BuildService/ListBuilds"
	// BuildServiceGetPullInfoProcedure is the fully-qualified name of the BuildService's GetPullInfo
	// RPC.
	BuildServiceGetPullInfoProcedure = "/depot.cli.v1.BuildService/GetPullInfo"
)

// BuildServiceClient is a client for the depot.cli.v1.BuildService service.
type BuildServiceClient interface {
	CreateBuild(context.Context, *connect_go.Request[v1.CreateBuildRequest]) (*connect_go.Response[v1.CreateBuildResponse], error)
	FinishBuild(context.Context, *connect_go.Request[v1.FinishBuildRequest]) (*connect_go.Response[v1.FinishBuildResponse], error)
	GetBuildKitConnection(context.Context, *connect_go.Request[v1.GetBuildKitConnectionRequest]) (*connect_go.Response[v1.GetBuildKitConnectionResponse], error)
	ReportBuildHealth(context.Context, *connect_go.Request[v1.ReportBuildHealthRequest]) (*connect_go.Response[v1.ReportBuildHealthResponse], error)
	ReportTimings(context.Context, *connect_go.Request[v1.ReportTimingsRequest]) (*connect_go.Response[v1.ReportTimingsResponse], error)
	ReportStatus(context.Context, *connect_go.Request[v1.ReportStatusRequest]) (*connect_go.Response[v1.ReportStatusResponse], error)
	ReportBuildContext(context.Context, *connect_go.Request[v1.ReportBuildContextRequest]) (*connect_go.Response[v1.ReportBuildContextResponse], error)
	ListBuilds(context.Context, *connect_go.Request[v1.ListBuildsRequest]) (*connect_go.Response[v1.ListBuildsResponse], error)
	GetPullInfo(context.Context, *connect_go.Request[v1.GetPullInfoRequest]) (*connect_go.Response[v1.GetPullInfoResponse], error)
}

// NewBuildServiceClient constructs a client for the depot.cli.v1.BuildService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BuildServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &buildServiceClient{
		createBuild: connect_go.NewClient[v1.CreateBuildRequest, v1.CreateBuildResponse](
			httpClient,
			baseURL+BuildServiceCreateBuildProcedure,
			opts...,
		),
		finishBuild: connect_go.NewClient[v1.FinishBuildRequest, v1.FinishBuildResponse](
			httpClient,
			baseURL+BuildServiceFinishBuildProcedure,
			opts...,
		),
		getBuildKitConnection: connect_go.NewClient[v1.GetBuildKitConnectionRequest, v1.GetBuildKitConnectionResponse](
			httpClient,
			baseURL+BuildServiceGetBuildKitConnectionProcedure,
			opts...,
		),
		reportBuildHealth: connect_go.NewClient[v1.ReportBuildHealthRequest, v1.ReportBuildHealthResponse](
			httpClient,
			baseURL+BuildServiceReportBuildHealthProcedure,
			opts...,
		),
		reportTimings: connect_go.NewClient[v1.ReportTimingsRequest, v1.ReportTimingsResponse](
			httpClient,
			baseURL+BuildServiceReportTimingsProcedure,
			opts...,
		),
		reportStatus: connect_go.NewClient[v1.ReportStatusRequest, v1.ReportStatusResponse](
			httpClient,
			baseURL+BuildServiceReportStatusProcedure,
			opts...,
		),
		reportBuildContext: connect_go.NewClient[v1.ReportBuildContextRequest, v1.ReportBuildContextResponse](
			httpClient,
			baseURL+BuildServiceReportBuildContextProcedure,
			opts...,
		),
		listBuilds: connect_go.NewClient[v1.ListBuildsRequest, v1.ListBuildsResponse](
			httpClient,
			baseURL+BuildServiceListBuildsProcedure,
			opts...,
		),
		getPullInfo: connect_go.NewClient[v1.GetPullInfoRequest, v1.GetPullInfoResponse](
			httpClient,
			baseURL+BuildServiceGetPullInfoProcedure,
			opts...,
		),
	}
}

// buildServiceClient implements BuildServiceClient.
type buildServiceClient struct {
	createBuild           *connect_go.Client[v1.CreateBuildRequest, v1.CreateBuildResponse]
	finishBuild           *connect_go.Client[v1.FinishBuildRequest, v1.FinishBuildResponse]
	getBuildKitConnection *connect_go.Client[v1.GetBuildKitConnectionRequest, v1.GetBuildKitConnectionResponse]
	reportBuildHealth     *connect_go.Client[v1.ReportBuildHealthRequest, v1.ReportBuildHealthResponse]
	reportTimings         *connect_go.Client[v1.ReportTimingsRequest, v1.ReportTimingsResponse]
	reportStatus          *connect_go.Client[v1.ReportStatusRequest, v1.ReportStatusResponse]
	reportBuildContext    *connect_go.Client[v1.ReportBuildContextRequest, v1.ReportBuildContextResponse]
	listBuilds            *connect_go.Client[v1.ListBuildsRequest, v1.ListBuildsResponse]
	getPullInfo           *connect_go.Client[v1.GetPullInfoRequest, v1.GetPullInfoResponse]
}

// CreateBuild calls depot.cli.v1.BuildService.CreateBuild.
func (c *buildServiceClient) CreateBuild(ctx context.Context, req *connect_go.Request[v1.CreateBuildRequest]) (*connect_go.Response[v1.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// FinishBuild calls depot.cli.v1.BuildService.FinishBuild.
func (c *buildServiceClient) FinishBuild(ctx context.Context, req *connect_go.Request[v1.FinishBuildRequest]) (*connect_go.Response[v1.FinishBuildResponse], error) {
	return c.finishBuild.CallUnary(ctx, req)
}

// GetBuildKitConnection calls depot.cli.v1.BuildService.GetBuildKitConnection.
func (c *buildServiceClient) GetBuildKitConnection(ctx context.Context, req *connect_go.Request[v1.GetBuildKitConnectionRequest]) (*connect_go.Response[v1.GetBuildKitConnectionResponse], error) {
	return c.getBuildKitConnection.CallUnary(ctx, req)
}

// ReportBuildHealth calls depot.cli.v1.BuildService.ReportBuildHealth.
func (c *buildServiceClient) ReportBuildHealth(ctx context.Context, req *connect_go.Request[v1.ReportBuildHealthRequest]) (*connect_go.Response[v1.ReportBuildHealthResponse], error) {
	return c.reportBuildHealth.CallUnary(ctx, req)
}

// ReportTimings calls depot.cli.v1.BuildService.ReportTimings.
func (c *buildServiceClient) ReportTimings(ctx context.Context, req *connect_go.Request[v1.ReportTimingsRequest]) (*connect_go.Response[v1.ReportTimingsResponse], error) {
	return c.reportTimings.CallUnary(ctx, req)
}

// ReportStatus calls depot.cli.v1.BuildService.ReportStatus.
func (c *buildServiceClient) ReportStatus(ctx context.Context, req *connect_go.Request[v1.ReportStatusRequest]) (*connect_go.Response[v1.ReportStatusResponse], error) {
	return c.reportStatus.CallUnary(ctx, req)
}

// ReportBuildContext calls depot.cli.v1.BuildService.ReportBuildContext.
func (c *buildServiceClient) ReportBuildContext(ctx context.Context, req *connect_go.Request[v1.ReportBuildContextRequest]) (*connect_go.Response[v1.ReportBuildContextResponse], error) {
	return c.reportBuildContext.CallUnary(ctx, req)
}

// ListBuilds calls depot.cli.v1.BuildService.ListBuilds.
func (c *buildServiceClient) ListBuilds(ctx context.Context, req *connect_go.Request[v1.ListBuildsRequest]) (*connect_go.Response[v1.ListBuildsResponse], error) {
	return c.listBuilds.CallUnary(ctx, req)
}

// GetPullInfo calls depot.cli.v1.BuildService.GetPullInfo.
func (c *buildServiceClient) GetPullInfo(ctx context.Context, req *connect_go.Request[v1.GetPullInfoRequest]) (*connect_go.Response[v1.GetPullInfoResponse], error) {
	return c.getPullInfo.CallUnary(ctx, req)
}

// BuildServiceHandler is an implementation of the depot.cli.v1.BuildService service.
type BuildServiceHandler interface {
	CreateBuild(context.Context, *connect_go.Request[v1.CreateBuildRequest]) (*connect_go.Response[v1.CreateBuildResponse], error)
	FinishBuild(context.Context, *connect_go.Request[v1.FinishBuildRequest]) (*connect_go.Response[v1.FinishBuildResponse], error)
	GetBuildKitConnection(context.Context, *connect_go.Request[v1.GetBuildKitConnectionRequest]) (*connect_go.Response[v1.GetBuildKitConnectionResponse], error)
	ReportBuildHealth(context.Context, *connect_go.Request[v1.ReportBuildHealthRequest]) (*connect_go.Response[v1.ReportBuildHealthResponse], error)
	ReportTimings(context.Context, *connect_go.Request[v1.ReportTimingsRequest]) (*connect_go.Response[v1.ReportTimingsResponse], error)
	ReportStatus(context.Context, *connect_go.Request[v1.ReportStatusRequest]) (*connect_go.Response[v1.ReportStatusResponse], error)
	ReportBuildContext(context.Context, *connect_go.Request[v1.ReportBuildContextRequest]) (*connect_go.Response[v1.ReportBuildContextResponse], error)
	ListBuilds(context.Context, *connect_go.Request[v1.ListBuildsRequest]) (*connect_go.Response[v1.ListBuildsResponse], error)
	GetPullInfo(context.Context, *connect_go.Request[v1.GetPullInfoRequest]) (*connect_go.Response[v1.GetPullInfoResponse], error)
}

// NewBuildServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildServiceHandler(svc BuildServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(BuildServiceCreateBuildProcedure, connect_go.NewUnaryHandler(
		BuildServiceCreateBuildProcedure,
		svc.CreateBuild,
		opts...,
	))
	mux.Handle(BuildServiceFinishBuildProcedure, connect_go.NewUnaryHandler(
		BuildServiceFinishBuildProcedure,
		svc.FinishBuild,
		opts...,
	))
	mux.Handle(BuildServiceGetBuildKitConnectionProcedure, connect_go.NewUnaryHandler(
		BuildServiceGetBuildKitConnectionProcedure,
		svc.GetBuildKitConnection,
		opts...,
	))
	mux.Handle(BuildServiceReportBuildHealthProcedure, connect_go.NewUnaryHandler(
		BuildServiceReportBuildHealthProcedure,
		svc.ReportBuildHealth,
		opts...,
	))
	mux.Handle(BuildServiceReportTimingsProcedure, connect_go.NewUnaryHandler(
		BuildServiceReportTimingsProcedure,
		svc.ReportTimings,
		opts...,
	))
	mux.Handle(BuildServiceReportStatusProcedure, connect_go.NewUnaryHandler(
		BuildServiceReportStatusProcedure,
		svc.ReportStatus,
		opts...,
	))
	mux.Handle(BuildServiceReportBuildContextProcedure, connect_go.NewUnaryHandler(
		BuildServiceReportBuildContextProcedure,
		svc.ReportBuildContext,
		opts...,
	))
	mux.Handle(BuildServiceListBuildsProcedure, connect_go.NewUnaryHandler(
		BuildServiceListBuildsProcedure,
		svc.ListBuilds,
		opts...,
	))
	mux.Handle(BuildServiceGetPullInfoProcedure, connect_go.NewUnaryHandler(
		BuildServiceGetPullInfoProcedure,
		svc.GetPullInfo,
		opts...,
	))
	return "/depot.cli.v1.BuildService/", mux
}

// UnimplementedBuildServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildServiceHandler struct{}

func (UnimplementedBuildServiceHandler) CreateBuild(context.Context, *connect_go.Request[v1.CreateBuildRequest]) (*connect_go.Response[v1.CreateBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.CreateBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) FinishBuild(context.Context, *connect_go.Request[v1.FinishBuildRequest]) (*connect_go.Response[v1.FinishBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.FinishBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) GetBuildKitConnection(context.Context, *connect_go.Request[v1.GetBuildKitConnectionRequest]) (*connect_go.Response[v1.GetBuildKitConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.GetBuildKitConnection is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportBuildHealth(context.Context, *connect_go.Request[v1.ReportBuildHealthRequest]) (*connect_go.Response[v1.ReportBuildHealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.ReportBuildHealth is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportTimings(context.Context, *connect_go.Request[v1.ReportTimingsRequest]) (*connect_go.Response[v1.ReportTimingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.ReportTimings is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportStatus(context.Context, *connect_go.Request[v1.ReportStatusRequest]) (*connect_go.Response[v1.ReportStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.ReportStatus is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportBuildContext(context.Context, *connect_go.Request[v1.ReportBuildContextRequest]) (*connect_go.Response[v1.ReportBuildContextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.ReportBuildContext is not implemented"))
}

func (UnimplementedBuildServiceHandler) ListBuilds(context.Context, *connect_go.Request[v1.ListBuildsRequest]) (*connect_go.Response[v1.ListBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.ListBuilds is not implemented"))
}

func (UnimplementedBuildServiceHandler) GetPullInfo(context.Context, *connect_go.Request[v1.GetPullInfoRequest]) (*connect_go.Response[v1.GetPullInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1.BuildService.GetPullInfo is not implemented"))
}
