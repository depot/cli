// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/agent/v1/session.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/depot/cli/pkg/proto/depot/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "depot.agent.v1.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceUploadSessionProcedure is the fully-qualified name of the SessionService's
	// UploadSession RPC.
	SessionServiceUploadSessionProcedure = "/depot.agent.v1.SessionService/UploadSession"
	// SessionServiceDownloadSessionProcedure is the fully-qualified name of the SessionService's
	// DownloadSession RPC.
	SessionServiceDownloadSessionProcedure = "/depot.agent.v1.SessionService/DownloadSession"
	// SessionServiceListSessionsProcedure is the fully-qualified name of the SessionService's
	// ListSessions RPC.
	SessionServiceListSessionsProcedure = "/depot.agent.v1.SessionService/ListSessions"
)

// SessionServiceClient is a client for the depot.agent.v1.SessionService service.
type SessionServiceClient interface {
	UploadSession(context.Context, *connect.Request[v1.UploadSessionRequest]) (*connect.Response[v1.UploadSessionResponse], error)
	DownloadSession(context.Context, *connect.Request[v1.DownloadSessionRequest]) (*connect.Response[v1.DownloadSessionResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
}

// NewSessionServiceClient constructs a client for the depot.agent.v1.SessionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionServiceClient{
		uploadSession: connect.NewClient[v1.UploadSessionRequest, v1.UploadSessionResponse](
			httpClient,
			baseURL+SessionServiceUploadSessionProcedure,
			opts...,
		),
		downloadSession: connect.NewClient[v1.DownloadSessionRequest, v1.DownloadSessionResponse](
			httpClient,
			baseURL+SessionServiceDownloadSessionProcedure,
			opts...,
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+SessionServiceListSessionsProcedure,
			opts...,
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	uploadSession   *connect.Client[v1.UploadSessionRequest, v1.UploadSessionResponse]
	downloadSession *connect.Client[v1.DownloadSessionRequest, v1.DownloadSessionResponse]
	listSessions    *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
}

// UploadSession calls depot.agent.v1.SessionService.UploadSession.
func (c *sessionServiceClient) UploadSession(ctx context.Context, req *connect.Request[v1.UploadSessionRequest]) (*connect.Response[v1.UploadSessionResponse], error) {
	return c.uploadSession.CallUnary(ctx, req)
}

// DownloadSession calls depot.agent.v1.SessionService.DownloadSession.
func (c *sessionServiceClient) DownloadSession(ctx context.Context, req *connect.Request[v1.DownloadSessionRequest]) (*connect.Response[v1.DownloadSessionResponse], error) {
	return c.downloadSession.CallUnary(ctx, req)
}

// ListSessions calls depot.agent.v1.SessionService.ListSessions.
func (c *sessionServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the depot.agent.v1.SessionService service.
type SessionServiceHandler interface {
	UploadSession(context.Context, *connect.Request[v1.UploadSessionRequest]) (*connect.Response[v1.UploadSessionResponse], error)
	DownloadSession(context.Context, *connect.Request[v1.DownloadSessionRequest]) (*connect.Response[v1.DownloadSessionResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceUploadSessionHandler := connect.NewUnaryHandler(
		SessionServiceUploadSessionProcedure,
		svc.UploadSession,
		opts...,
	)
	sessionServiceDownloadSessionHandler := connect.NewUnaryHandler(
		SessionServiceDownloadSessionProcedure,
		svc.DownloadSession,
		opts...,
	)
	sessionServiceListSessionsHandler := connect.NewUnaryHandler(
		SessionServiceListSessionsProcedure,
		svc.ListSessions,
		opts...,
	)
	return "/depot.agent.v1.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceUploadSessionProcedure:
			sessionServiceUploadSessionHandler.ServeHTTP(w, r)
		case SessionServiceDownloadSessionProcedure:
			sessionServiceDownloadSessionHandler.ServeHTTP(w, r)
		case SessionServiceListSessionsProcedure:
			sessionServiceListSessionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) UploadSession(context.Context, *connect.Request[v1.UploadSessionRequest]) (*connect.Response[v1.UploadSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SessionService.UploadSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) DownloadSession(context.Context, *connect.Request[v1.DownloadSessionRequest]) (*connect.Response[v1.DownloadSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SessionService.DownloadSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SessionService.ListSessions is not implemented"))
}
