// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/agent/v1/claude.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/depot/cli/pkg/proto/depot/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ClaudeServiceName is the fully-qualified name of the ClaudeService service.
	ClaudeServiceName = "depot.agent.v1.ClaudeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClaudeServiceUploadClaudeSessionProcedure is the fully-qualified name of the ClaudeService's
	// UploadClaudeSession RPC.
	ClaudeServiceUploadClaudeSessionProcedure = "/depot.agent.v1.ClaudeService/UploadClaudeSession"
	// ClaudeServiceDownloadClaudeSessionProcedure is the fully-qualified name of the ClaudeService's
	// DownloadClaudeSession RPC.
	ClaudeServiceDownloadClaudeSessionProcedure = "/depot.agent.v1.ClaudeService/DownloadClaudeSession"
	// ClaudeServiceListClaudeSessionsProcedure is the fully-qualified name of the ClaudeService's
	// ListClaudeSessions RPC.
	ClaudeServiceListClaudeSessionsProcedure = "/depot.agent.v1.ClaudeService/ListClaudeSessions"
	// ClaudeServiceStartRemoteSessionProcedure is the fully-qualified name of the ClaudeService's
	// StartRemoteSession RPC.
	ClaudeServiceStartRemoteSessionProcedure = "/depot.agent.v1.ClaudeService/StartRemoteSession"
	// ClaudeServiceAddSecretProcedure is the fully-qualified name of the ClaudeService's AddSecret RPC.
	ClaudeServiceAddSecretProcedure = "/depot.agent.v1.ClaudeService/AddSecret"
	// ClaudeServiceRemoveSecretProcedure is the fully-qualified name of the ClaudeService's
	// RemoveSecret RPC.
	ClaudeServiceRemoveSecretProcedure = "/depot.agent.v1.ClaudeService/RemoveSecret"
)

// ClaudeServiceClient is a client for the depot.agent.v1.ClaudeService service.
type ClaudeServiceClient interface {
	UploadClaudeSession(context.Context, *connect.Request[v1.UploadClaudeSessionRequest]) (*connect.Response[v1.UploadClaudeSessionResponse], error)
	DownloadClaudeSession(context.Context, *connect.Request[v1.DownloadClaudeSessionRequest]) (*connect.Response[v1.DownloadClaudeSessionResponse], error)
	ListClaudeSessions(context.Context, *connect.Request[v1.ListClaudeSessionsRequest]) (*connect.Response[v1.ListClaudeSessionsResponse], error)
	StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteSessionRequest]) (*connect.Response[v1.StartRemoteSessionResponse], error)
	AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error)
}

// NewClaudeServiceClient constructs a client for the depot.agent.v1.ClaudeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClaudeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClaudeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &claudeServiceClient{
		uploadClaudeSession: connect.NewClient[v1.UploadClaudeSessionRequest, v1.UploadClaudeSessionResponse](
			httpClient,
			baseURL+ClaudeServiceUploadClaudeSessionProcedure,
			opts...,
		),
		downloadClaudeSession: connect.NewClient[v1.DownloadClaudeSessionRequest, v1.DownloadClaudeSessionResponse](
			httpClient,
			baseURL+ClaudeServiceDownloadClaudeSessionProcedure,
			opts...,
		),
		listClaudeSessions: connect.NewClient[v1.ListClaudeSessionsRequest, v1.ListClaudeSessionsResponse](
			httpClient,
			baseURL+ClaudeServiceListClaudeSessionsProcedure,
			opts...,
		),
		startRemoteSession: connect.NewClient[v1.StartRemoteSessionRequest, v1.StartRemoteSessionResponse](
			httpClient,
			baseURL+ClaudeServiceStartRemoteSessionProcedure,
			opts...,
		),
		addSecret: connect.NewClient[v1.AddSecretRequest, v1.AddSecretResponse](
			httpClient,
			baseURL+ClaudeServiceAddSecretProcedure,
			opts...,
		),
		removeSecret: connect.NewClient[v1.RemoveSecretRequest, v1.RemoveSecretResponse](
			httpClient,
			baseURL+ClaudeServiceRemoveSecretProcedure,
			opts...,
		),
	}
}

// claudeServiceClient implements ClaudeServiceClient.
type claudeServiceClient struct {
	uploadClaudeSession   *connect.Client[v1.UploadClaudeSessionRequest, v1.UploadClaudeSessionResponse]
	downloadClaudeSession *connect.Client[v1.DownloadClaudeSessionRequest, v1.DownloadClaudeSessionResponse]
	listClaudeSessions    *connect.Client[v1.ListClaudeSessionsRequest, v1.ListClaudeSessionsResponse]
	startRemoteSession    *connect.Client[v1.StartRemoteSessionRequest, v1.StartRemoteSessionResponse]
	addSecret             *connect.Client[v1.AddSecretRequest, v1.AddSecretResponse]
	removeSecret          *connect.Client[v1.RemoveSecretRequest, v1.RemoveSecretResponse]
}

// UploadClaudeSession calls depot.agent.v1.ClaudeService.UploadClaudeSession.
func (c *claudeServiceClient) UploadClaudeSession(ctx context.Context, req *connect.Request[v1.UploadClaudeSessionRequest]) (*connect.Response[v1.UploadClaudeSessionResponse], error) {
	return c.uploadClaudeSession.CallUnary(ctx, req)
}

// DownloadClaudeSession calls depot.agent.v1.ClaudeService.DownloadClaudeSession.
func (c *claudeServiceClient) DownloadClaudeSession(ctx context.Context, req *connect.Request[v1.DownloadClaudeSessionRequest]) (*connect.Response[v1.DownloadClaudeSessionResponse], error) {
	return c.downloadClaudeSession.CallUnary(ctx, req)
}

// ListClaudeSessions calls depot.agent.v1.ClaudeService.ListClaudeSessions.
func (c *claudeServiceClient) ListClaudeSessions(ctx context.Context, req *connect.Request[v1.ListClaudeSessionsRequest]) (*connect.Response[v1.ListClaudeSessionsResponse], error) {
	return c.listClaudeSessions.CallUnary(ctx, req)
}

// StartRemoteSession calls depot.agent.v1.ClaudeService.StartRemoteSession.
func (c *claudeServiceClient) StartRemoteSession(ctx context.Context, req *connect.Request[v1.StartRemoteSessionRequest]) (*connect.Response[v1.StartRemoteSessionResponse], error) {
	return c.startRemoteSession.CallUnary(ctx, req)
}

// AddSecret calls depot.agent.v1.ClaudeService.AddSecret.
func (c *claudeServiceClient) AddSecret(ctx context.Context, req *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error) {
	return c.addSecret.CallUnary(ctx, req)
}

// RemoveSecret calls depot.agent.v1.ClaudeService.RemoveSecret.
func (c *claudeServiceClient) RemoveSecret(ctx context.Context, req *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error) {
	return c.removeSecret.CallUnary(ctx, req)
}

// ClaudeServiceHandler is an implementation of the depot.agent.v1.ClaudeService service.
type ClaudeServiceHandler interface {
	UploadClaudeSession(context.Context, *connect.Request[v1.UploadClaudeSessionRequest]) (*connect.Response[v1.UploadClaudeSessionResponse], error)
	DownloadClaudeSession(context.Context, *connect.Request[v1.DownloadClaudeSessionRequest]) (*connect.Response[v1.DownloadClaudeSessionResponse], error)
	ListClaudeSessions(context.Context, *connect.Request[v1.ListClaudeSessionsRequest]) (*connect.Response[v1.ListClaudeSessionsResponse], error)
	StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteSessionRequest]) (*connect.Response[v1.StartRemoteSessionResponse], error)
	AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error)
}

// NewClaudeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClaudeServiceHandler(svc ClaudeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	claudeServiceUploadClaudeSessionHandler := connect.NewUnaryHandler(
		ClaudeServiceUploadClaudeSessionProcedure,
		svc.UploadClaudeSession,
		opts...,
	)
	claudeServiceDownloadClaudeSessionHandler := connect.NewUnaryHandler(
		ClaudeServiceDownloadClaudeSessionProcedure,
		svc.DownloadClaudeSession,
		opts...,
	)
	claudeServiceListClaudeSessionsHandler := connect.NewUnaryHandler(
		ClaudeServiceListClaudeSessionsProcedure,
		svc.ListClaudeSessions,
		opts...,
	)
	claudeServiceStartRemoteSessionHandler := connect.NewUnaryHandler(
		ClaudeServiceStartRemoteSessionProcedure,
		svc.StartRemoteSession,
		opts...,
	)
	claudeServiceAddSecretHandler := connect.NewUnaryHandler(
		ClaudeServiceAddSecretProcedure,
		svc.AddSecret,
		opts...,
	)
	claudeServiceRemoveSecretHandler := connect.NewUnaryHandler(
		ClaudeServiceRemoveSecretProcedure,
		svc.RemoveSecret,
		opts...,
	)
	return "/depot.agent.v1.ClaudeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClaudeServiceUploadClaudeSessionProcedure:
			claudeServiceUploadClaudeSessionHandler.ServeHTTP(w, r)
		case ClaudeServiceDownloadClaudeSessionProcedure:
			claudeServiceDownloadClaudeSessionHandler.ServeHTTP(w, r)
		case ClaudeServiceListClaudeSessionsProcedure:
			claudeServiceListClaudeSessionsHandler.ServeHTTP(w, r)
		case ClaudeServiceStartRemoteSessionProcedure:
			claudeServiceStartRemoteSessionHandler.ServeHTTP(w, r)
		case ClaudeServiceAddSecretProcedure:
			claudeServiceAddSecretHandler.ServeHTTP(w, r)
		case ClaudeServiceRemoveSecretProcedure:
			claudeServiceRemoveSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClaudeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClaudeServiceHandler struct{}

func (UnimplementedClaudeServiceHandler) UploadClaudeSession(context.Context, *connect.Request[v1.UploadClaudeSessionRequest]) (*connect.Response[v1.UploadClaudeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.UploadClaudeSession is not implemented"))
}

func (UnimplementedClaudeServiceHandler) DownloadClaudeSession(context.Context, *connect.Request[v1.DownloadClaudeSessionRequest]) (*connect.Response[v1.DownloadClaudeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.DownloadClaudeSession is not implemented"))
}

func (UnimplementedClaudeServiceHandler) ListClaudeSessions(context.Context, *connect.Request[v1.ListClaudeSessionsRequest]) (*connect.Response[v1.ListClaudeSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.ListClaudeSessions is not implemented"))
}

func (UnimplementedClaudeServiceHandler) StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteSessionRequest]) (*connect.Response[v1.StartRemoteSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.StartRemoteSession is not implemented"))
}

func (UnimplementedClaudeServiceHandler) AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.AddSecret is not implemented"))
}

func (UnimplementedClaudeServiceHandler) RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.ClaudeService.RemoveSecret is not implemented"))
}
