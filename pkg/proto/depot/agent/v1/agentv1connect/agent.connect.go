// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/agent/v1/agent.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/depot/cli/pkg/proto/depot/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "depot.agent.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceStartRemoteSessionProcedure is the fully-qualified name of the AgentService's
	// StartRemoteSession RPC.
	AgentServiceStartRemoteSessionProcedure = "/depot.agent.v1.AgentService/StartRemoteSession"
	// AgentServiceGetRemoteSessionProcedure is the fully-qualified name of the AgentService's
	// GetRemoteSession RPC.
	AgentServiceGetRemoteSessionProcedure = "/depot.agent.v1.AgentService/GetRemoteSession"
	// AgentServiceListRemoteSessionsProcedure is the fully-qualified name of the AgentService's
	// ListRemoteSessions RPC.
	AgentServiceListRemoteSessionsProcedure = "/depot.agent.v1.AgentService/ListRemoteSessions"
	// AgentServiceKillRemoteSessionProcedure is the fully-qualified name of the AgentService's
	// KillRemoteSession RPC.
	AgentServiceKillRemoteSessionProcedure = "/depot.agent.v1.AgentService/KillRemoteSession"
	// AgentServiceAddSecretProcedure is the fully-qualified name of the AgentService's AddSecret RPC.
	AgentServiceAddSecretProcedure = "/depot.agent.v1.AgentService/AddSecret"
	// AgentServiceRemoveSecretProcedure is the fully-qualified name of the AgentService's RemoveSecret
	// RPC.
	AgentServiceRemoveSecretProcedure = "/depot.agent.v1.AgentService/RemoveSecret"
	// AgentServiceListSecretsProcedure is the fully-qualified name of the AgentService's ListSecrets
	// RPC.
	AgentServiceListSecretsProcedure = "/depot.agent.v1.AgentService/ListSecrets"
	// AgentServiceStreamRemoteSessionLogsProcedure is the fully-qualified name of the AgentService's
	// StreamRemoteSessionLogs RPC.
	AgentServiceStreamRemoteSessionLogsProcedure = "/depot.agent.v1.AgentService/StreamRemoteSessionLogs"
)

// AgentServiceClient is a client for the depot.agent.v1.AgentService service.
type AgentServiceClient interface {
	StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteAgentSessionRequest]) (*connect.Response[v1.StartRemoteAgentSessionResponse], error)
	GetRemoteSession(context.Context, *connect.Request[v1.GetRemoteAgentSessionRequest]) (*connect.Response[v1.GetRemoteAgentSessionResponse], error)
	ListRemoteSessions(context.Context, *connect.Request[v1.ListRemoteAgentSessionsRequest]) (*connect.Response[v1.ListRemoteAgentSessionsResponse], error)
	KillRemoteSession(context.Context, *connect.Request[v1.KillRemoteAgentSessionRequest]) (*connect.Response[v1.KillRemoteAgentSessionResponse], error)
	AddSecret(context.Context, *connect.Request[v1.AddAgentSecretRequest]) (*connect.Response[v1.AddAgentSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveAgentSecretRequest]) (*connect.Response[v1.RemoveAgentSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListAgentSecretsRequest]) (*connect.Response[v1.ListAgentSecretsResponse], error)
	StreamRemoteSessionLogs(context.Context, *connect.Request[v1.StreamRemoteAgentSessionLogsRequest]) (*connect.ServerStreamForClient[v1.StreamRemoteAgentSessionLogsResponse], error)
}

// NewAgentServiceClient constructs a client for the depot.agent.v1.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		startRemoteSession: connect.NewClient[v1.StartRemoteAgentSessionRequest, v1.StartRemoteAgentSessionResponse](
			httpClient,
			baseURL+AgentServiceStartRemoteSessionProcedure,
			opts...,
		),
		getRemoteSession: connect.NewClient[v1.GetRemoteAgentSessionRequest, v1.GetRemoteAgentSessionResponse](
			httpClient,
			baseURL+AgentServiceGetRemoteSessionProcedure,
			opts...,
		),
		listRemoteSessions: connect.NewClient[v1.ListRemoteAgentSessionsRequest, v1.ListRemoteAgentSessionsResponse](
			httpClient,
			baseURL+AgentServiceListRemoteSessionsProcedure,
			opts...,
		),
		killRemoteSession: connect.NewClient[v1.KillRemoteAgentSessionRequest, v1.KillRemoteAgentSessionResponse](
			httpClient,
			baseURL+AgentServiceKillRemoteSessionProcedure,
			opts...,
		),
		addSecret: connect.NewClient[v1.AddAgentSecretRequest, v1.AddAgentSecretResponse](
			httpClient,
			baseURL+AgentServiceAddSecretProcedure,
			opts...,
		),
		removeSecret: connect.NewClient[v1.RemoveAgentSecretRequest, v1.RemoveAgentSecretResponse](
			httpClient,
			baseURL+AgentServiceRemoveSecretProcedure,
			opts...,
		),
		listSecrets: connect.NewClient[v1.ListAgentSecretsRequest, v1.ListAgentSecretsResponse](
			httpClient,
			baseURL+AgentServiceListSecretsProcedure,
			opts...,
		),
		streamRemoteSessionLogs: connect.NewClient[v1.StreamRemoteAgentSessionLogsRequest, v1.StreamRemoteAgentSessionLogsResponse](
			httpClient,
			baseURL+AgentServiceStreamRemoteSessionLogsProcedure,
			opts...,
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	startRemoteSession      *connect.Client[v1.StartRemoteAgentSessionRequest, v1.StartRemoteAgentSessionResponse]
	getRemoteSession        *connect.Client[v1.GetRemoteAgentSessionRequest, v1.GetRemoteAgentSessionResponse]
	listRemoteSessions      *connect.Client[v1.ListRemoteAgentSessionsRequest, v1.ListRemoteAgentSessionsResponse]
	killRemoteSession       *connect.Client[v1.KillRemoteAgentSessionRequest, v1.KillRemoteAgentSessionResponse]
	addSecret               *connect.Client[v1.AddAgentSecretRequest, v1.AddAgentSecretResponse]
	removeSecret            *connect.Client[v1.RemoveAgentSecretRequest, v1.RemoveAgentSecretResponse]
	listSecrets             *connect.Client[v1.ListAgentSecretsRequest, v1.ListAgentSecretsResponse]
	streamRemoteSessionLogs *connect.Client[v1.StreamRemoteAgentSessionLogsRequest, v1.StreamRemoteAgentSessionLogsResponse]
}

// StartRemoteSession calls depot.agent.v1.AgentService.StartRemoteSession.
func (c *agentServiceClient) StartRemoteSession(ctx context.Context, req *connect.Request[v1.StartRemoteAgentSessionRequest]) (*connect.Response[v1.StartRemoteAgentSessionResponse], error) {
	return c.startRemoteSession.CallUnary(ctx, req)
}

// GetRemoteSession calls depot.agent.v1.AgentService.GetRemoteSession.
func (c *agentServiceClient) GetRemoteSession(ctx context.Context, req *connect.Request[v1.GetRemoteAgentSessionRequest]) (*connect.Response[v1.GetRemoteAgentSessionResponse], error) {
	return c.getRemoteSession.CallUnary(ctx, req)
}

// ListRemoteSessions calls depot.agent.v1.AgentService.ListRemoteSessions.
func (c *agentServiceClient) ListRemoteSessions(ctx context.Context, req *connect.Request[v1.ListRemoteAgentSessionsRequest]) (*connect.Response[v1.ListRemoteAgentSessionsResponse], error) {
	return c.listRemoteSessions.CallUnary(ctx, req)
}

// KillRemoteSession calls depot.agent.v1.AgentService.KillRemoteSession.
func (c *agentServiceClient) KillRemoteSession(ctx context.Context, req *connect.Request[v1.KillRemoteAgentSessionRequest]) (*connect.Response[v1.KillRemoteAgentSessionResponse], error) {
	return c.killRemoteSession.CallUnary(ctx, req)
}

// AddSecret calls depot.agent.v1.AgentService.AddSecret.
func (c *agentServiceClient) AddSecret(ctx context.Context, req *connect.Request[v1.AddAgentSecretRequest]) (*connect.Response[v1.AddAgentSecretResponse], error) {
	return c.addSecret.CallUnary(ctx, req)
}

// RemoveSecret calls depot.agent.v1.AgentService.RemoveSecret.
func (c *agentServiceClient) RemoveSecret(ctx context.Context, req *connect.Request[v1.RemoveAgentSecretRequest]) (*connect.Response[v1.RemoveAgentSecretResponse], error) {
	return c.removeSecret.CallUnary(ctx, req)
}

// ListSecrets calls depot.agent.v1.AgentService.ListSecrets.
func (c *agentServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1.ListAgentSecretsRequest]) (*connect.Response[v1.ListAgentSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// StreamRemoteSessionLogs calls depot.agent.v1.AgentService.StreamRemoteSessionLogs.
func (c *agentServiceClient) StreamRemoteSessionLogs(ctx context.Context, req *connect.Request[v1.StreamRemoteAgentSessionLogsRequest]) (*connect.ServerStreamForClient[v1.StreamRemoteAgentSessionLogsResponse], error) {
	return c.streamRemoteSessionLogs.CallServerStream(ctx, req)
}

// AgentServiceHandler is an implementation of the depot.agent.v1.AgentService service.
type AgentServiceHandler interface {
	StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteAgentSessionRequest]) (*connect.Response[v1.StartRemoteAgentSessionResponse], error)
	GetRemoteSession(context.Context, *connect.Request[v1.GetRemoteAgentSessionRequest]) (*connect.Response[v1.GetRemoteAgentSessionResponse], error)
	ListRemoteSessions(context.Context, *connect.Request[v1.ListRemoteAgentSessionsRequest]) (*connect.Response[v1.ListRemoteAgentSessionsResponse], error)
	KillRemoteSession(context.Context, *connect.Request[v1.KillRemoteAgentSessionRequest]) (*connect.Response[v1.KillRemoteAgentSessionResponse], error)
	AddSecret(context.Context, *connect.Request[v1.AddAgentSecretRequest]) (*connect.Response[v1.AddAgentSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveAgentSecretRequest]) (*connect.Response[v1.RemoveAgentSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListAgentSecretsRequest]) (*connect.Response[v1.ListAgentSecretsResponse], error)
	StreamRemoteSessionLogs(context.Context, *connect.Request[v1.StreamRemoteAgentSessionLogsRequest], *connect.ServerStream[v1.StreamRemoteAgentSessionLogsResponse]) error
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceStartRemoteSessionHandler := connect.NewUnaryHandler(
		AgentServiceStartRemoteSessionProcedure,
		svc.StartRemoteSession,
		opts...,
	)
	agentServiceGetRemoteSessionHandler := connect.NewUnaryHandler(
		AgentServiceGetRemoteSessionProcedure,
		svc.GetRemoteSession,
		opts...,
	)
	agentServiceListRemoteSessionsHandler := connect.NewUnaryHandler(
		AgentServiceListRemoteSessionsProcedure,
		svc.ListRemoteSessions,
		opts...,
	)
	agentServiceKillRemoteSessionHandler := connect.NewUnaryHandler(
		AgentServiceKillRemoteSessionProcedure,
		svc.KillRemoteSession,
		opts...,
	)
	agentServiceAddSecretHandler := connect.NewUnaryHandler(
		AgentServiceAddSecretProcedure,
		svc.AddSecret,
		opts...,
	)
	agentServiceRemoveSecretHandler := connect.NewUnaryHandler(
		AgentServiceRemoveSecretProcedure,
		svc.RemoveSecret,
		opts...,
	)
	agentServiceListSecretsHandler := connect.NewUnaryHandler(
		AgentServiceListSecretsProcedure,
		svc.ListSecrets,
		opts...,
	)
	agentServiceStreamRemoteSessionLogsHandler := connect.NewServerStreamHandler(
		AgentServiceStreamRemoteSessionLogsProcedure,
		svc.StreamRemoteSessionLogs,
		opts...,
	)
	return "/depot.agent.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceStartRemoteSessionProcedure:
			agentServiceStartRemoteSessionHandler.ServeHTTP(w, r)
		case AgentServiceGetRemoteSessionProcedure:
			agentServiceGetRemoteSessionHandler.ServeHTTP(w, r)
		case AgentServiceListRemoteSessionsProcedure:
			agentServiceListRemoteSessionsHandler.ServeHTTP(w, r)
		case AgentServiceKillRemoteSessionProcedure:
			agentServiceKillRemoteSessionHandler.ServeHTTP(w, r)
		case AgentServiceAddSecretProcedure:
			agentServiceAddSecretHandler.ServeHTTP(w, r)
		case AgentServiceRemoveSecretProcedure:
			agentServiceRemoveSecretHandler.ServeHTTP(w, r)
		case AgentServiceListSecretsProcedure:
			agentServiceListSecretsHandler.ServeHTTP(w, r)
		case AgentServiceStreamRemoteSessionLogsProcedure:
			agentServiceStreamRemoteSessionLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) StartRemoteSession(context.Context, *connect.Request[v1.StartRemoteAgentSessionRequest]) (*connect.Response[v1.StartRemoteAgentSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.StartRemoteSession is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetRemoteSession(context.Context, *connect.Request[v1.GetRemoteAgentSessionRequest]) (*connect.Response[v1.GetRemoteAgentSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.GetRemoteSession is not implemented"))
}

func (UnimplementedAgentServiceHandler) ListRemoteSessions(context.Context, *connect.Request[v1.ListRemoteAgentSessionsRequest]) (*connect.Response[v1.ListRemoteAgentSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.ListRemoteSessions is not implemented"))
}

func (UnimplementedAgentServiceHandler) KillRemoteSession(context.Context, *connect.Request[v1.KillRemoteAgentSessionRequest]) (*connect.Response[v1.KillRemoteAgentSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.KillRemoteSession is not implemented"))
}

func (UnimplementedAgentServiceHandler) AddSecret(context.Context, *connect.Request[v1.AddAgentSecretRequest]) (*connect.Response[v1.AddAgentSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.AddSecret is not implemented"))
}

func (UnimplementedAgentServiceHandler) RemoveSecret(context.Context, *connect.Request[v1.RemoveAgentSecretRequest]) (*connect.Response[v1.RemoveAgentSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.RemoveSecret is not implemented"))
}

func (UnimplementedAgentServiceHandler) ListSecrets(context.Context, *connect.Request[v1.ListAgentSecretsRequest]) (*connect.Response[v1.ListAgentSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.ListSecrets is not implemented"))
}

func (UnimplementedAgentServiceHandler) StreamRemoteSessionLogs(context.Context, *connect.Request[v1.StreamRemoteAgentSessionLogsRequest], *connect.ServerStream[v1.StreamRemoteAgentSessionLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.AgentService.StreamRemoteSessionLogs is not implemented"))
}
