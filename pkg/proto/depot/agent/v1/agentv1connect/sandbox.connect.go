// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/agent/v1/sandbox.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/depot/cli/pkg/proto/depot/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SandboxServiceName is the fully-qualified name of the SandboxService service.
	SandboxServiceName = "depot.agent.v1.SandboxService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SandboxServiceStartSandboxProcedure is the fully-qualified name of the SandboxService's
	// StartSandbox RPC.
	SandboxServiceStartSandboxProcedure = "/depot.agent.v1.SandboxService/StartSandbox"
	// SandboxServiceGetSandboxProcedure is the fully-qualified name of the SandboxService's GetSandbox
	// RPC.
	SandboxServiceGetSandboxProcedure = "/depot.agent.v1.SandboxService/GetSandbox"
	// SandboxServiceListSandboxsProcedure is the fully-qualified name of the SandboxService's
	// ListSandboxs RPC.
	SandboxServiceListSandboxsProcedure = "/depot.agent.v1.SandboxService/ListSandboxs"
	// SandboxServiceKillSandboxProcedure is the fully-qualified name of the SandboxService's
	// KillSandbox RPC.
	SandboxServiceKillSandboxProcedure = "/depot.agent.v1.SandboxService/KillSandbox"
	// SandboxServiceStreamSandboxLogsProcedure is the fully-qualified name of the SandboxService's
	// StreamSandboxLogs RPC.
	SandboxServiceStreamSandboxLogsProcedure = "/depot.agent.v1.SandboxService/StreamSandboxLogs"
	// SandboxServiceAddSecretProcedure is the fully-qualified name of the SandboxService's AddSecret
	// RPC.
	SandboxServiceAddSecretProcedure = "/depot.agent.v1.SandboxService/AddSecret"
	// SandboxServiceRemoveSecretProcedure is the fully-qualified name of the SandboxService's
	// RemoveSecret RPC.
	SandboxServiceRemoveSecretProcedure = "/depot.agent.v1.SandboxService/RemoveSecret"
	// SandboxServiceListSecretsProcedure is the fully-qualified name of the SandboxService's
	// ListSecrets RPC.
	SandboxServiceListSecretsProcedure = "/depot.agent.v1.SandboxService/ListSecrets"
	// SandboxServiceShutdownProcedure is the fully-qualified name of the SandboxService's Shutdown RPC.
	SandboxServiceShutdownProcedure = "/depot.agent.v1.SandboxService/Shutdown"
)

// SandboxServiceClient is a client for the depot.agent.v1.SandboxService service.
type SandboxServiceClient interface {
	StartSandbox(context.Context, *connect.Request[v1.StartSandboxRequest]) (*connect.Response[v1.StartSandboxResponse], error)
	GetSandbox(context.Context, *connect.Request[v1.GetSandboxRequest]) (*connect.Response[v1.GetSandboxResponse], error)
	ListSandboxs(context.Context, *connect.Request[v1.ListSandboxsRequest]) (*connect.Response[v1.ListSandboxsResponse], error)
	KillSandbox(context.Context, *connect.Request[v1.KillSandboxRequest]) (*connect.Response[v1.KillSandboxResponse], error)
	StreamSandboxLogs(context.Context, *connect.Request[v1.StreamSandboxLogsRequest]) (*connect.ServerStreamForClient[v1.StreamSandboxLogsResponse], error)
	AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
}

// NewSandboxServiceClient constructs a client for the depot.agent.v1.SandboxService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSandboxServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SandboxServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sandboxServiceClient{
		startSandbox: connect.NewClient[v1.StartSandboxRequest, v1.StartSandboxResponse](
			httpClient,
			baseURL+SandboxServiceStartSandboxProcedure,
			opts...,
		),
		getSandbox: connect.NewClient[v1.GetSandboxRequest, v1.GetSandboxResponse](
			httpClient,
			baseURL+SandboxServiceGetSandboxProcedure,
			opts...,
		),
		listSandboxs: connect.NewClient[v1.ListSandboxsRequest, v1.ListSandboxsResponse](
			httpClient,
			baseURL+SandboxServiceListSandboxsProcedure,
			opts...,
		),
		killSandbox: connect.NewClient[v1.KillSandboxRequest, v1.KillSandboxResponse](
			httpClient,
			baseURL+SandboxServiceKillSandboxProcedure,
			opts...,
		),
		streamSandboxLogs: connect.NewClient[v1.StreamSandboxLogsRequest, v1.StreamSandboxLogsResponse](
			httpClient,
			baseURL+SandboxServiceStreamSandboxLogsProcedure,
			opts...,
		),
		addSecret: connect.NewClient[v1.AddSecretRequest, v1.AddSecretResponse](
			httpClient,
			baseURL+SandboxServiceAddSecretProcedure,
			opts...,
		),
		removeSecret: connect.NewClient[v1.RemoveSecretRequest, v1.RemoveSecretResponse](
			httpClient,
			baseURL+SandboxServiceRemoveSecretProcedure,
			opts...,
		),
		listSecrets: connect.NewClient[v1.ListSecretsRequest, v1.ListSecretsResponse](
			httpClient,
			baseURL+SandboxServiceListSecretsProcedure,
			opts...,
		),
		shutdown: connect.NewClient[v1.ShutdownRequest, v1.ShutdownResponse](
			httpClient,
			baseURL+SandboxServiceShutdownProcedure,
			opts...,
		),
	}
}

// sandboxServiceClient implements SandboxServiceClient.
type sandboxServiceClient struct {
	startSandbox      *connect.Client[v1.StartSandboxRequest, v1.StartSandboxResponse]
	getSandbox        *connect.Client[v1.GetSandboxRequest, v1.GetSandboxResponse]
	listSandboxs      *connect.Client[v1.ListSandboxsRequest, v1.ListSandboxsResponse]
	killSandbox       *connect.Client[v1.KillSandboxRequest, v1.KillSandboxResponse]
	streamSandboxLogs *connect.Client[v1.StreamSandboxLogsRequest, v1.StreamSandboxLogsResponse]
	addSecret         *connect.Client[v1.AddSecretRequest, v1.AddSecretResponse]
	removeSecret      *connect.Client[v1.RemoveSecretRequest, v1.RemoveSecretResponse]
	listSecrets       *connect.Client[v1.ListSecretsRequest, v1.ListSecretsResponse]
	shutdown          *connect.Client[v1.ShutdownRequest, v1.ShutdownResponse]
}

// StartSandbox calls depot.agent.v1.SandboxService.StartSandbox.
func (c *sandboxServiceClient) StartSandbox(ctx context.Context, req *connect.Request[v1.StartSandboxRequest]) (*connect.Response[v1.StartSandboxResponse], error) {
	return c.startSandbox.CallUnary(ctx, req)
}

// GetSandbox calls depot.agent.v1.SandboxService.GetSandbox.
func (c *sandboxServiceClient) GetSandbox(ctx context.Context, req *connect.Request[v1.GetSandboxRequest]) (*connect.Response[v1.GetSandboxResponse], error) {
	return c.getSandbox.CallUnary(ctx, req)
}

// ListSandboxs calls depot.agent.v1.SandboxService.ListSandboxs.
func (c *sandboxServiceClient) ListSandboxs(ctx context.Context, req *connect.Request[v1.ListSandboxsRequest]) (*connect.Response[v1.ListSandboxsResponse], error) {
	return c.listSandboxs.CallUnary(ctx, req)
}

// KillSandbox calls depot.agent.v1.SandboxService.KillSandbox.
func (c *sandboxServiceClient) KillSandbox(ctx context.Context, req *connect.Request[v1.KillSandboxRequest]) (*connect.Response[v1.KillSandboxResponse], error) {
	return c.killSandbox.CallUnary(ctx, req)
}

// StreamSandboxLogs calls depot.agent.v1.SandboxService.StreamSandboxLogs.
func (c *sandboxServiceClient) StreamSandboxLogs(ctx context.Context, req *connect.Request[v1.StreamSandboxLogsRequest]) (*connect.ServerStreamForClient[v1.StreamSandboxLogsResponse], error) {
	return c.streamSandboxLogs.CallServerStream(ctx, req)
}

// AddSecret calls depot.agent.v1.SandboxService.AddSecret.
func (c *sandboxServiceClient) AddSecret(ctx context.Context, req *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error) {
	return c.addSecret.CallUnary(ctx, req)
}

// RemoveSecret calls depot.agent.v1.SandboxService.RemoveSecret.
func (c *sandboxServiceClient) RemoveSecret(ctx context.Context, req *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error) {
	return c.removeSecret.CallUnary(ctx, req)
}

// ListSecrets calls depot.agent.v1.SandboxService.ListSecrets.
func (c *sandboxServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// Shutdown calls depot.agent.v1.SandboxService.Shutdown.
func (c *sandboxServiceClient) Shutdown(ctx context.Context, req *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// SandboxServiceHandler is an implementation of the depot.agent.v1.SandboxService service.
type SandboxServiceHandler interface {
	StartSandbox(context.Context, *connect.Request[v1.StartSandboxRequest]) (*connect.Response[v1.StartSandboxResponse], error)
	GetSandbox(context.Context, *connect.Request[v1.GetSandboxRequest]) (*connect.Response[v1.GetSandboxResponse], error)
	ListSandboxs(context.Context, *connect.Request[v1.ListSandboxsRequest]) (*connect.Response[v1.ListSandboxsResponse], error)
	KillSandbox(context.Context, *connect.Request[v1.KillSandboxRequest]) (*connect.Response[v1.KillSandboxResponse], error)
	StreamSandboxLogs(context.Context, *connect.Request[v1.StreamSandboxLogsRequest], *connect.ServerStream[v1.StreamSandboxLogsResponse]) error
	AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error)
	RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
}

// NewSandboxServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSandboxServiceHandler(svc SandboxServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sandboxServiceStartSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceStartSandboxProcedure,
		svc.StartSandbox,
		opts...,
	)
	sandboxServiceGetSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceGetSandboxProcedure,
		svc.GetSandbox,
		opts...,
	)
	sandboxServiceListSandboxsHandler := connect.NewUnaryHandler(
		SandboxServiceListSandboxsProcedure,
		svc.ListSandboxs,
		opts...,
	)
	sandboxServiceKillSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceKillSandboxProcedure,
		svc.KillSandbox,
		opts...,
	)
	sandboxServiceStreamSandboxLogsHandler := connect.NewServerStreamHandler(
		SandboxServiceStreamSandboxLogsProcedure,
		svc.StreamSandboxLogs,
		opts...,
	)
	sandboxServiceAddSecretHandler := connect.NewUnaryHandler(
		SandboxServiceAddSecretProcedure,
		svc.AddSecret,
		opts...,
	)
	sandboxServiceRemoveSecretHandler := connect.NewUnaryHandler(
		SandboxServiceRemoveSecretProcedure,
		svc.RemoveSecret,
		opts...,
	)
	sandboxServiceListSecretsHandler := connect.NewUnaryHandler(
		SandboxServiceListSecretsProcedure,
		svc.ListSecrets,
		opts...,
	)
	sandboxServiceShutdownHandler := connect.NewUnaryHandler(
		SandboxServiceShutdownProcedure,
		svc.Shutdown,
		opts...,
	)
	return "/depot.agent.v1.SandboxService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SandboxServiceStartSandboxProcedure:
			sandboxServiceStartSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceGetSandboxProcedure:
			sandboxServiceGetSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceListSandboxsProcedure:
			sandboxServiceListSandboxsHandler.ServeHTTP(w, r)
		case SandboxServiceKillSandboxProcedure:
			sandboxServiceKillSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceStreamSandboxLogsProcedure:
			sandboxServiceStreamSandboxLogsHandler.ServeHTTP(w, r)
		case SandboxServiceAddSecretProcedure:
			sandboxServiceAddSecretHandler.ServeHTTP(w, r)
		case SandboxServiceRemoveSecretProcedure:
			sandboxServiceRemoveSecretHandler.ServeHTTP(w, r)
		case SandboxServiceListSecretsProcedure:
			sandboxServiceListSecretsHandler.ServeHTTP(w, r)
		case SandboxServiceShutdownProcedure:
			sandboxServiceShutdownHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSandboxServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSandboxServiceHandler struct{}

func (UnimplementedSandboxServiceHandler) StartSandbox(context.Context, *connect.Request[v1.StartSandboxRequest]) (*connect.Response[v1.StartSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.StartSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandbox(context.Context, *connect.Request[v1.GetSandboxRequest]) (*connect.Response[v1.GetSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.GetSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) ListSandboxs(context.Context, *connect.Request[v1.ListSandboxsRequest]) (*connect.Response[v1.ListSandboxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.ListSandboxs is not implemented"))
}

func (UnimplementedSandboxServiceHandler) KillSandbox(context.Context, *connect.Request[v1.KillSandboxRequest]) (*connect.Response[v1.KillSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.KillSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) StreamSandboxLogs(context.Context, *connect.Request[v1.StreamSandboxLogsRequest], *connect.ServerStream[v1.StreamSandboxLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.StreamSandboxLogs is not implemented"))
}

func (UnimplementedSandboxServiceHandler) AddSecret(context.Context, *connect.Request[v1.AddSecretRequest]) (*connect.Response[v1.AddSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.AddSecret is not implemented"))
}

func (UnimplementedSandboxServiceHandler) RemoveSecret(context.Context, *connect.Request[v1.RemoveSecretRequest]) (*connect.Response[v1.RemoveSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.RemoveSecret is not implemented"))
}

func (UnimplementedSandboxServiceHandler) ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.ListSecrets is not implemented"))
}

func (UnimplementedSandboxServiceHandler) Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("depot.agent.v1.SandboxService.Shutdown is not implemented"))
}
